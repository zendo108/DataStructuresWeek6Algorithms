
import java.util.Arrays;
/**
 * 
 * @author zendo
 * This is a modified verion from the work of (Jenny’s lectures CS/IT NET&JRF, 2019)
 * Jenny’s lectures CS/IT NET&JRF. (2019). 7.6 Quick Sort Algorithm | Sorting Algorithm | Quick Sort Algorithm Explained [YouTube Video]. 
 * Retrieved from https://www.youtube.com/watch?v=QN9hnmAgmOc
 *
 */
public class Main {

	static int[] arr = {23,7,4,5,6,2,10,16,3};
//	static int[] arr = {910,653,993,424,895,43,965,908,516,56,945,908,849,185,614,113,442,96,927,503,249,259,756,78,403,454,417,139,137,316,278,647,572,677,720,103,184,26,511,138,622,491,326,27,604,813,994,64,685,102,992,446,241,330,874,364,474,460,19,980,387,906,412,799,31,459,875,971,170,961,485,789,212,369,951,82,798,546,461,19,913,450,261,561,621,380,764,262,502,487,744,806,268,579,554,503,205,79,397,538,62,322,604,278,812,375,38,387,419,985,401,482,686,442,660,409,364,159,693,572,401,594,777,647,276,722,497,558,559,239,756,779,307,603,706,467,840,777,815,626,131,30,583,893,874,163,165,577,180,145,68,413,198,759,372,286,1000,728,499,251,993,143,437,181,101,444,396,880,766,673,362,619,843,328,95,806,977,605,316,244,317,957,915,649,754,605,92,832,333,601,9,857,385,838,711,766,633,652,555,918,462,77,988,448,293,640,252,130,197,409,632,810,386,12,656,807,178,118,773,935,746,633,903,385,678,5,738,542,277,28,195,746,249,862,769,647,70,490,502,793,14,217,102,858,921,604,77,619,380,727,383,49,451,9,731,552,800,982,104,767,482,137,356,38,300,351,556,403,150,672,907,636,24,703,635,168,132,879,751,573,833,161,119,342,467,108,889,447,834,261,787,500,834,118,413,420,508,549,417,64,999,665,102,224,225,395,417,651,970,458,44,824,383,566,137,975,957,904,823,283,495,711,86,91,572,655,876,19,719,565,882,141,679,754,113,479,979,283,573,384,734,38,374,685,554,375,320,479,264,285,475,529,11,575,307,172,686,108,360,394,210,930,413,360,564,221,619,960,104,147,395,889,183,148,127,610,806,94,729,404,345,611,365,74,734,590,746,402,417,564,791,467,88,688,365,64,612,876,780,449,640,38,536,469,727,383,286,927,753,543,832,518,372,961,94,297,596,587,308,419,153,838,467,215,244,572,899,833,357,285,44,760,494,719,151,494,599,385,145,18,602,916,666,534,208,262,737,813,452,194,428,696,328,164,463,392,477,438,409,861,33,8,892,339,361,258,107,7,774,218,538,833,750,201,146,632,798,98,635,834,1,235,524,349,904,831,128,262,555,824,385,479,295,698,176,931,611,6,831,162,159,386,308,625,405,531,115,777,812,708,229,741,458,600,643,272,404,876,112,989,594,784,172,350,705,400,284,926,258,639,201,701,681,504,226,810,280,680,102,858,258,705,950,422,185,151,801,708,228,745,948,422,739,688,20,913,680,947,616,967,701,423,959,571,283,435,579,865,949,96,59,5,880,840,843,528,331,997,834,1,322,93,597,181,18,914,863,916,247,371,704,731,343,787,4,43,739,379,169,405,563,890,131,868,843,969,930,358,968,830,760,907,712,6,165,300,670,340,30,541,798,190,271,414,134,227,465,651,52,866,492,759,818,344,624,811,751,566,223,781,497,456,37,280,987,882,83,408,167,436,630,379,915,563,516,769,697,680,645,98,986,127,217,807,672,106,396,201,27,34,802,718,346,279,387,328,719,643,568,758,194,143,897,103,479,865,932,152,225,458,394,625,333,524,582,474,70,378,963,315,19,396,211,111,286,360,533,923,741,680,338,654,112,624,397,286,98,571,343,281,568,174,996,679,939,101,846,390,428,269,467,598,479,683,367,246,455,94,610,792,434,607,395,69,890,445,967,188,279,818,750,951,915,696,53,238,576,732,179,304,761,896,47,831,262,793,863,581,989,180,373,128,612,184,758,855,578,831,392,940,632,582,836,542,695,744,200,634,12,95,889,372,665,569,749,626,512,700,98,189,72,451,476,255,425,1,522,799,487,755,881,708,6,237,671,952,916,619,724,892,681,952,142,808,99,159,175,675,15,537,160,750,297,637,72,332,725,87,578,945,48,550,52,619,632,802,102,939,346,992,558,287,331,32,151,687,160,301,673,377,876,214,184,63,14,184,598,27,533,108,313,640,865,764,651,551,277,702,223,74,739,887,761,185,124,764,648,300,142,415,214,11,894,845,1,466,105,106,146,485,100,733,450,786,622,986,852,487,68,832,113,564,842,134,306,567,494,998,444,704,825,848,133,442,196,744,299,168,667,702,89,437,145,358,666,212,400,325,679,712,110,567,511,952,357,256,925,835,215,430,593,345,889,560,615,207,694,694,514,820,504,947,32,930,159,619,239,725,491,119,238,729,505,207,973,692,932,819,871,192,779,653,855,866,60,886,410,632,533,628,382,863,128,396,580,744,276,392,22,453};
	
	
	public static void main(String[] args) {
		
		int low = 0;
		int high = arr.length - 1;
		
		System.out.println(Arrays.toString(arr));
		qsort(low,high);// 1
		System.out.println(Arrays.toString(arr));
		
	}
	
	public static int part(int l,int h) {
		int p = arr[h];
		int i = l, j = h;
		System.out.println("p = "+ p);
		while(i<j) {
			
			while(arr[i]<p) {//looking for a value > pivot
				if(i==arr.length-1) break;
				i++;
			}
			
			
			while(arr[j]>=p) {
				if(j==0) break;
				j--;
			}
			
			if(i<j) {
				System.out.println("swap i and j "+ arr[i] + " and " + arr[j]);
				swap(i,j);
			}
		}
		
		System.out.println("swap h and i "+ arr[h] + " and " + arr[i]);
		swap(h,i);
		return i;
	}
	
public static void qsort(int l,int h) {
	if(l<h) {
		int p = part(l,h);// 3
		qsort(l,p-1);// 2
		qsort(p+1,h);
	}
}
	
	public static void swap(int a,int b) {
		int temp = arr[a];
		arr[a] = arr[b];
		arr[b] = temp;
	}
}
